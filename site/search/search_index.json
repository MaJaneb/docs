{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"lab1/","text":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u00ab\u0411\u0438\u0440\u0436\u0430 \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u00bb \u00b6 \u041f\u0440\u043e\u0435\u043a\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043d\u0430 FastAPI \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c SQLModel, JWT-\u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 Alembic \u0434\u043b\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438: \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438, \u043a\u043d\u0438\u0433\u0438, \u0436\u0430\u043d\u0440\u044b \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u00b6 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f OAuth2 Password Flow (Bearer Token). \u0422\u043e\u043a\u0435\u043d \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u043e\u0433\u0438\u043d\u0435 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0432 \u0437\u0430\u0449\u0438\u0449\u0451\u043d\u043d\u044b\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u0445. \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f: get_password_hash \u2014 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0445\u0435\u0448\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u0447\u0435\u0440\u0435\u0437 bcrypt. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0430\u0440\u043e\u043b\u044f: verify_password \u2014 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u043e\u043b\u044f \u0441 \u0445\u0435\u0448\u0435\u043c. \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f JWT: create_access_token \u2014 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0441 \u043f\u043e\u043b\u0435\u043c sub \u0438 \u0441\u0440\u043e\u043a\u043e\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: get_current_user \u2014 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438 \u043f\u043e\u0438\u0441\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e email. from fastapi.security import OAuth2PasswordBearer from jose import jwt oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/user/login\") def get_current_user(token: str = Depends(oauth2_scheme)) -> User: payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM]) email = payload.get(\"sub\") # ... \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0411\u0414 ... \u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043a\u0440\u0430\u0442\u043a\u043e) \u00b6 User: id, username, email, hashed_password, created_at; \u0441\u0432\u044f\u0437\u0438 \u0441 \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u0438 \u043e\u0431\u043c\u0435\u043d\u0430\u043c\u0438. Book: id, user_id, title, author, description, status (\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u0430/\u041e\u0431\u043c\u0435\u043d\u0435\u043d\u0430), created_at; \u0441\u0432\u044f\u0437\u0438 \u0441 \u0436\u0430\u043d\u0440\u0430\u043c\u0438. Genre: id, name; \u043c\u043d\u043e\u0433\u0438\u0435-\u043a\u043e-\u043c\u043d\u043e\u0433\u0438\u043c \u0441 Book \u0447\u0435\u0440\u0435\u0437 BookGenre. ExchangeRequest: id, sender_id, receiver_id, sender_book_id, requested_book_id, status (\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f/\u041f\u0440\u0438\u043d\u044f\u0442\u043e/\u041e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043e/\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043e), created_at. \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u00b6 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 (/user) \u00b6 POST /register \u2014 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f. \u0422\u0435\u043b\u043e: username, email, password. \u041e\u0442\u0432\u0435\u0442: UserRead. POST /login \u2014 \u0432\u0445\u043e\u0434 (OAuth2PasswordRequestForm: username=email, password). \u041e\u0442\u0432\u0435\u0442: Token \u0441 access_token. GET /users_get \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 (Bearer). \u041e\u0442\u0432\u0435\u0442: List[UserRead]. GET /user_get_{user_id} \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e id (Bearer). \u041e\u0442\u0432\u0435\u0442: UserRead. PATCH /user_update_{user_id} \u2014 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c username/email (Bearer). \u0422\u0435\u043b\u043e: UserUpdate. \u041e\u0442\u0432\u0435\u0442: UserRead. DELETE /delete_{user_id} \u2014 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (Bearer). \u041e\u0442\u0432\u0435\u0442: { \"ok\": true }. \u041a\u043d\u0438\u0433\u0438 (/book) \u00b6 POST /book_create \u2014 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443. \u0422\u0435\u043b\u043e: BookCreate (title, author, description, status, genre_ids?). \u041e\u0442\u0432\u0435\u0442: BookResponse (\u0432\u043a\u043b\u044e\u0447\u0430\u044f genres). PATCH /book_patch/{book_id} \u2014 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0437\u0430\u043c\u0435\u043d\u0443 \u0436\u0430\u043d\u0440\u043e\u0432. \u0422\u0435\u043b\u043e: BookUpdate. \u041e\u0442\u0432\u0435\u0442: BookResponse. GET /books_get \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043d\u0438\u0433 \u0441 \u0436\u0430\u043d\u0440\u0430\u043c\u0438. \u041e\u0442\u0432\u0435\u0442: List[BookResponse]. GET /book_get/{book_id} \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u043f\u043e id. \u041e\u0442\u0432\u0435\u0442: BookResponse. DELETE /book_delete/{book_id} \u2014 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443. \u041e\u0442\u0432\u0435\u0442: { \"ok\": true }. \u0416\u0430\u043d\u0440\u044b (/genre) \u00b6 GET /genres_get \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u0436\u0430\u043d\u0440\u043e\u0432. \u041e\u0442\u0432\u0435\u0442: List[GenreResponse]. POST /genre_post \u2014 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0436\u0430\u043d\u0440. \u0422\u0435\u043b\u043e: GenreCreateAndUpdate. \u041e\u0442\u0432\u0435\u0442: GenreResponse. PATCH /genre_patch{genre_id} \u2014 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0436\u0430\u043d\u0440. \u0422\u0435\u043b\u043e: GenreCreateAndUpdate. \u041e\u0442\u0432\u0435\u0442: GenreResponse. GET /genre_get{genre_id} \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0436\u0430\u043d\u0440. \u041e\u0442\u0432\u0435\u0442: GenreResponse. DELETE /genre_delete_{genre_id} \u2014 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0436\u0430\u043d\u0440. \u041e\u0442\u0432\u0435\u0442: { \"ok\": true }. \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d (/exchange_request) \u00b6 POST /exchange_request_post \u2014 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d. \u0422\u0435\u043b\u043e: ExchangeRequestCreate. \u041e\u0442\u0432\u0435\u0442: ExchangeRequestResponse. PATCH /exchange_request_post{exchange_request_id} \u2014 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0422\u0435\u043b\u043e: ExchangeRequestUpdateStatus. \u041e\u0442\u0432\u0435\u0442: ExchangeRequestResponse. GET /exchange_requests_get \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0442\u0432\u0435\u0442: List[ExchangeRequestResponse]. GET /exchange_request_get{exchange_request_id} \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0434\u0438\u043d \u0437\u0430\u043f\u0440\u043e\u0441. \u041e\u0442\u0432\u0435\u0442: ExchangeRequestResponse. DELETE /exchange_request_delete{exchange_request_id} \u2014 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441. \u041e\u0442\u0432\u0435\u0442: { \"ok\": true }. \u041e\u0431\u043c\u0435\u043d\u044b (/exchange) \u00b6 \u0417\u0430\u0433\u043b\u0443\u0448\u043a\u0438 (\u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f): GET /exchange_get \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u043c\u0435\u043d\u043e\u0432. POST /exchange_create \u2014 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u043c\u0435\u043d\u0430. \u0421\u0445\u0435\u043c\u044b (\u0432\u044b\u0434\u0435\u0440\u0436\u043a\u0438) \u00b6 class BookCreate(BaseModel): title: str author: str description: str status: Status = Status.available genre_ids: Optional[List[int]] = None class ExchangeRequestCreate(BaseModel): sender_id: int receiver_id: int sender_book_id: int requested_book_id: int status: StatusExchange \u0417\u0430\u043f\u0443\u0441\u043a \u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u00b6 \u2014 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f (\u0441\u0435\u043a\u0440\u0435\u0442 JWT, \u0411\u0414) \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438. \u2014 \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 Alembic (alembic upgrade head). \u2014 \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 (uvicorn main:app --reload). Alembic \u00b6 Alembic \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0445\u0435\u043c\u044b \u0411\u0414: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435, \u043e\u0442\u043a\u0430\u0442 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439.","title":"lab1"},{"location":"lab1/#_1","text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043d\u0430 FastAPI \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c SQLModel, JWT-\u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 Alembic \u0434\u043b\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438: \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438, \u043a\u043d\u0438\u0433\u0438, \u0436\u0430\u043d\u0440\u044b \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d.","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u00ab\u0411\u0438\u0440\u0436\u0430 \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u00bb"},{"location":"lab1/#_2","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f OAuth2 Password Flow (Bearer Token). \u0422\u043e\u043a\u0435\u043d \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u043e\u0433\u0438\u043d\u0435 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0432 \u0437\u0430\u0449\u0438\u0449\u0451\u043d\u043d\u044b\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u0445. \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f: get_password_hash \u2014 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0445\u0435\u0448\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u0447\u0435\u0440\u0435\u0437 bcrypt. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0430\u0440\u043e\u043b\u044f: verify_password \u2014 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u043e\u043b\u044f \u0441 \u0445\u0435\u0448\u0435\u043c. \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f JWT: create_access_token \u2014 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0441 \u043f\u043e\u043b\u0435\u043c sub \u0438 \u0441\u0440\u043e\u043a\u043e\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: get_current_user \u2014 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438 \u043f\u043e\u0438\u0441\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e email. from fastapi.security import OAuth2PasswordBearer from jose import jwt oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/user/login\") def get_current_user(token: str = Depends(oauth2_scheme)) -> User: payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM]) email = payload.get(\"sub\") # ... \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0411\u0414 ...","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f"},{"location":"lab1/#_3","text":"User: id, username, email, hashed_password, created_at; \u0441\u0432\u044f\u0437\u0438 \u0441 \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u0438 \u043e\u0431\u043c\u0435\u043d\u0430\u043c\u0438. Book: id, user_id, title, author, description, status (\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u0430/\u041e\u0431\u043c\u0435\u043d\u0435\u043d\u0430), created_at; \u0441\u0432\u044f\u0437\u0438 \u0441 \u0436\u0430\u043d\u0440\u0430\u043c\u0438. Genre: id, name; \u043c\u043d\u043e\u0433\u0438\u0435-\u043a\u043e-\u043c\u043d\u043e\u0433\u0438\u043c \u0441 Book \u0447\u0435\u0440\u0435\u0437 BookGenre. ExchangeRequest: id, sender_id, receiver_id, sender_book_id, requested_book_id, status (\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f/\u041f\u0440\u0438\u043d\u044f\u0442\u043e/\u041e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043e/\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043e), created_at.","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043a\u0440\u0430\u0442\u043a\u043e)"},{"location":"lab1/#_4","text":"","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b"},{"location":"lab1/#user","text":"POST /register \u2014 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f. \u0422\u0435\u043b\u043e: username, email, password. \u041e\u0442\u0432\u0435\u0442: UserRead. POST /login \u2014 \u0432\u0445\u043e\u0434 (OAuth2PasswordRequestForm: username=email, password). \u041e\u0442\u0432\u0435\u0442: Token \u0441 access_token. GET /users_get \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 (Bearer). \u041e\u0442\u0432\u0435\u0442: List[UserRead]. GET /user_get_{user_id} \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e id (Bearer). \u041e\u0442\u0432\u0435\u0442: UserRead. PATCH /user_update_{user_id} \u2014 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c username/email (Bearer). \u0422\u0435\u043b\u043e: UserUpdate. \u041e\u0442\u0432\u0435\u0442: UserRead. DELETE /delete_{user_id} \u2014 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (Bearer). \u041e\u0442\u0432\u0435\u0442: { \"ok\": true }.","title":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 (/user)"},{"location":"lab1/#book","text":"POST /book_create \u2014 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443. \u0422\u0435\u043b\u043e: BookCreate (title, author, description, status, genre_ids?). \u041e\u0442\u0432\u0435\u0442: BookResponse (\u0432\u043a\u043b\u044e\u0447\u0430\u044f genres). PATCH /book_patch/{book_id} \u2014 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0437\u0430\u043c\u0435\u043d\u0443 \u0436\u0430\u043d\u0440\u043e\u0432. \u0422\u0435\u043b\u043e: BookUpdate. \u041e\u0442\u0432\u0435\u0442: BookResponse. GET /books_get \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043d\u0438\u0433 \u0441 \u0436\u0430\u043d\u0440\u0430\u043c\u0438. \u041e\u0442\u0432\u0435\u0442: List[BookResponse]. GET /book_get/{book_id} \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u043f\u043e id. \u041e\u0442\u0432\u0435\u0442: BookResponse. DELETE /book_delete/{book_id} \u2014 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443. \u041e\u0442\u0432\u0435\u0442: { \"ok\": true }.","title":"\u041a\u043d\u0438\u0433\u0438 (/book)"},{"location":"lab1/#genre","text":"GET /genres_get \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u0436\u0430\u043d\u0440\u043e\u0432. \u041e\u0442\u0432\u0435\u0442: List[GenreResponse]. POST /genre_post \u2014 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0436\u0430\u043d\u0440. \u0422\u0435\u043b\u043e: GenreCreateAndUpdate. \u041e\u0442\u0432\u0435\u0442: GenreResponse. PATCH /genre_patch{genre_id} \u2014 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0436\u0430\u043d\u0440. \u0422\u0435\u043b\u043e: GenreCreateAndUpdate. \u041e\u0442\u0432\u0435\u0442: GenreResponse. GET /genre_get{genre_id} \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0436\u0430\u043d\u0440. \u041e\u0442\u0432\u0435\u0442: GenreResponse. DELETE /genre_delete_{genre_id} \u2014 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0436\u0430\u043d\u0440. \u041e\u0442\u0432\u0435\u0442: { \"ok\": true }.","title":"\u0416\u0430\u043d\u0440\u044b (/genre)"},{"location":"lab1/#exchange_request","text":"POST /exchange_request_post \u2014 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d. \u0422\u0435\u043b\u043e: ExchangeRequestCreate. \u041e\u0442\u0432\u0435\u0442: ExchangeRequestResponse. PATCH /exchange_request_post{exchange_request_id} \u2014 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0422\u0435\u043b\u043e: ExchangeRequestUpdateStatus. \u041e\u0442\u0432\u0435\u0442: ExchangeRequestResponse. GET /exchange_requests_get \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0442\u0432\u0435\u0442: List[ExchangeRequestResponse]. GET /exchange_request_get{exchange_request_id} \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0434\u0438\u043d \u0437\u0430\u043f\u0440\u043e\u0441. \u041e\u0442\u0432\u0435\u0442: ExchangeRequestResponse. DELETE /exchange_request_delete{exchange_request_id} \u2014 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441. \u041e\u0442\u0432\u0435\u0442: { \"ok\": true }.","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d (/exchange_request)"},{"location":"lab1/#exchange","text":"\u0417\u0430\u0433\u043b\u0443\u0448\u043a\u0438 (\u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f): GET /exchange_get \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u043c\u0435\u043d\u043e\u0432. POST /exchange_create \u2014 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u043c\u0435\u043d\u0430.","title":"\u041e\u0431\u043c\u0435\u043d\u044b (/exchange)"},{"location":"lab1/#_5","text":"class BookCreate(BaseModel): title: str author: str description: str status: Status = Status.available genre_ids: Optional[List[int]] = None class ExchangeRequestCreate(BaseModel): sender_id: int receiver_id: int sender_book_id: int requested_book_id: int status: StatusExchange","title":"\u0421\u0445\u0435\u043c\u044b (\u0432\u044b\u0434\u0435\u0440\u0436\u043a\u0438)"},{"location":"lab1/#_6","text":"\u2014 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f (\u0441\u0435\u043a\u0440\u0435\u0442 JWT, \u0411\u0414) \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438. \u2014 \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 Alembic (alembic upgrade head). \u2014 \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 (uvicorn main:app --reload).","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438"},{"location":"lab1/#alembic","text":"Alembic \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0445\u0435\u043c\u044b \u0411\u0414: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435, \u043e\u0442\u043a\u0430\u0442 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439.","title":"Alembic"},{"location":"lab2/","text":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u0447\u0438\u0441\u0435\u043b \u00b6 \u0412 \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u044f \u0441\u0440\u0430\u0432\u043d\u0438\u043b \u0442\u0440\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043a \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044e \u0441\u0443\u043c\u043c\u044b \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1_000_000_000, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0432 \u0438\u0445 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0432 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435 lab2/task1 : \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 ( asyncio ) \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 ( multiprocessing ) \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 ( threading ) 1. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u00b6 import asyncio import time async def partial_sum(start, end): return sum(range(start, end)) async def main(): n = 1_000_000_000 num_tasks = 10 chunk_size = n // num_tasks start_time = time.time() tasks = [] for i in range(0, n, chunk_size): start = i + 1 end = min(i + chunk_size, n) + 1 tasks.append(partial_sum(start, end)) results = await asyncio.gather(*tasks) total = sum(results) end_time = time.time() print(f\"\u0421\u0443\u043c\u043c\u0430: {total}, \u0432\u0440\u0435\u043c\u044f: {end_time - start_time:.2f} \u0441\u0435\u043a\") asyncio.run(main()) \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b asyncio \u0438 10 \u0437\u0430\u0434\u0430\u0447, \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0447\u0430\u0441\u0442\u044c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442 CPU-bound \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0435\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0439 I/O. \u041f\u0440\u0438\u043c\u0435\u0440\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 CPU; \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043d\u0435\u0442. 2. \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u00b6 import multiprocessing import os import time def partial_sum(start, end, res_queue): total = sum(range(start, end)) res_queue.put(total) def main(): n = 1_000_000_000 num_processes = 4 chunk_size = n // num_processes res_queue = multiprocessing.Queue() processes = [] start_time = time.time() for i in range(num_processes): start = i * chunk_size + 1 if i == num_processes - 1: end = n + 1 else: end = start + chunk_size p = multiprocessing.Process( target=partial_sum, args=(start, end, res_queue) ) processes.append(p) p.start() for p in processes: p.join() results = [] while not res_queue.empty(): results.append(res_queue.get()) total = sum(results) end_time = time.time() print(f\"\u0421\u0443\u043c\u043c\u0430: {total}, \u0432\u0440\u0435\u043c\u044f: {end_time - start_time:.2f} \u0441\u0435\u043a\") if __name__ == '__main__': main() \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u0414\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 4 \u0447\u0430\u0441\u0442\u0438, \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 CPU-bound \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0437\u0430 \u0441\u0447\u0451\u0442 \u043e\u0431\u0445\u043e\u0434\u0430 GIL. \u041e\u0431\u044b\u0447\u043d\u043e \u0441\u0430\u043c\u044b\u0439 \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0438\u0437 \u0442\u0440\u0451\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043d\u0430 \u043c\u043d\u043e\u0433\u043e\u044f\u0434\u0435\u0440\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445. 3. \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u00b6 import threading import time def partial_sum(start, end, res, lock): total = sum(range(start, end)) with lock: res.append(total) def main(): n = 1_000_000_000 num_threads = 4 chunk_size = n // num_threads results = [] lock = threading.Lock() threads = [] start_time = time.time() for i in range(0, n, chunk_size): start = i + 1 end = min(i + chunk_size, n) + 1 t = threading.Thread( target=partial_sum, args=(start, end, results, lock)) threads.append(t) t.start() for t in threads: t.join() total = sum(results) end_time = time.time() print(f\"\u0421\u0443\u043c\u043c\u0430: {total}, \u0432\u0440\u0435\u043c\u044f: {end_time - start_time:.2f} \u0441\u0435\u043a\") if __name__ == '__main__': main() \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f 4 \u043f\u043e\u0442\u043e\u043a\u0430 \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0437\u0430\u0449\u0438\u0449\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 Lock . \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447; \u043d\u0430 CPU-bound \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0430 \u043e\u0431\u044b\u0447\u043d\u043e \u043d\u0435\u0442 \u0438\u0437-\u0437\u0430 GIL. \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0435, \u0438\u043d\u043e\u0433\u0434\u0430 \u0447\u0443\u0442\u044c \u0445\u0443\u0436\u0435 \u0438\u0437-\u0437\u0430 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432. \u0412\u044b\u0432\u043e\u0434\u044b \u00b6 \u0414\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447 \u0432 \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0441\u0435\u0431\u044f multiprocessing (4 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430). asyncio \u0438 threading \u043d\u0435 \u0434\u0430\u044e\u0442 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043d\u0430 \u0447\u0438\u0441\u0442\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435. \u0412\u043e \u0432\u0441\u0435\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\u0445 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u0443\u043c\u043c\u044b \u0434\u043b\u044f \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 1..1_000_000_000: 500000000500000000","title":"lab2"},{"location":"lab2/#_1","text":"\u0412 \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u044f \u0441\u0440\u0430\u0432\u043d\u0438\u043b \u0442\u0440\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043a \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044e \u0441\u0443\u043c\u043c\u044b \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1_000_000_000, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0432 \u0438\u0445 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0432 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435 lab2/task1 : \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 ( asyncio ) \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 ( multiprocessing ) \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 ( threading )","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u0447\u0438\u0441\u0435\u043b"},{"location":"lab2/#1","text":"import asyncio import time async def partial_sum(start, end): return sum(range(start, end)) async def main(): n = 1_000_000_000 num_tasks = 10 chunk_size = n // num_tasks start_time = time.time() tasks = [] for i in range(0, n, chunk_size): start = i + 1 end = min(i + chunk_size, n) + 1 tasks.append(partial_sum(start, end)) results = await asyncio.gather(*tasks) total = sum(results) end_time = time.time() print(f\"\u0421\u0443\u043c\u043c\u0430: {total}, \u0432\u0440\u0435\u043c\u044f: {end_time - start_time:.2f} \u0441\u0435\u043a\") asyncio.run(main()) \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b asyncio \u0438 10 \u0437\u0430\u0434\u0430\u0447, \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0447\u0430\u0441\u0442\u044c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442 CPU-bound \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0435\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0439 I/O. \u041f\u0440\u0438\u043c\u0435\u0440\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 CPU; \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043d\u0435\u0442.","title":"1. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434"},{"location":"lab2/#2","text":"import multiprocessing import os import time def partial_sum(start, end, res_queue): total = sum(range(start, end)) res_queue.put(total) def main(): n = 1_000_000_000 num_processes = 4 chunk_size = n // num_processes res_queue = multiprocessing.Queue() processes = [] start_time = time.time() for i in range(num_processes): start = i * chunk_size + 1 if i == num_processes - 1: end = n + 1 else: end = start + chunk_size p = multiprocessing.Process( target=partial_sum, args=(start, end, res_queue) ) processes.append(p) p.start() for p in processes: p.join() results = [] while not res_queue.empty(): results.append(res_queue.get()) total = sum(results) end_time = time.time() print(f\"\u0421\u0443\u043c\u043c\u0430: {total}, \u0432\u0440\u0435\u043c\u044f: {end_time - start_time:.2f} \u0441\u0435\u043a\") if __name__ == '__main__': main() \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u0414\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 4 \u0447\u0430\u0441\u0442\u0438, \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 CPU-bound \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0437\u0430 \u0441\u0447\u0451\u0442 \u043e\u0431\u0445\u043e\u0434\u0430 GIL. \u041e\u0431\u044b\u0447\u043d\u043e \u0441\u0430\u043c\u044b\u0439 \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0438\u0437 \u0442\u0440\u0451\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043d\u0430 \u043c\u043d\u043e\u0433\u043e\u044f\u0434\u0435\u0440\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445.","title":"2. \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434"},{"location":"lab2/#3","text":"import threading import time def partial_sum(start, end, res, lock): total = sum(range(start, end)) with lock: res.append(total) def main(): n = 1_000_000_000 num_threads = 4 chunk_size = n // num_threads results = [] lock = threading.Lock() threads = [] start_time = time.time() for i in range(0, n, chunk_size): start = i + 1 end = min(i + chunk_size, n) + 1 t = threading.Thread( target=partial_sum, args=(start, end, results, lock)) threads.append(t) t.start() for t in threads: t.join() total = sum(results) end_time = time.time() print(f\"\u0421\u0443\u043c\u043c\u0430: {total}, \u0432\u0440\u0435\u043c\u044f: {end_time - start_time:.2f} \u0441\u0435\u043a\") if __name__ == '__main__': main() \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f 4 \u043f\u043e\u0442\u043e\u043a\u0430 \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0437\u0430\u0449\u0438\u0449\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 Lock . \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447; \u043d\u0430 CPU-bound \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0430 \u043e\u0431\u044b\u0447\u043d\u043e \u043d\u0435\u0442 \u0438\u0437-\u0437\u0430 GIL. \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0435, \u0438\u043d\u043e\u0433\u0434\u0430 \u0447\u0443\u0442\u044c \u0445\u0443\u0436\u0435 \u0438\u0437-\u0437\u0430 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432.","title":"3. \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434"},{"location":"lab2/#_2","text":"\u0414\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447 \u0432 \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0441\u0435\u0431\u044f multiprocessing (4 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430). asyncio \u0438 threading \u043d\u0435 \u0434\u0430\u044e\u0442 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043d\u0430 \u0447\u0438\u0441\u0442\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435. \u0412\u043e \u0432\u0441\u0435\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\u0445 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u0443\u043c\u043c\u044b \u0434\u043b\u044f \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 1..1_000_000_000: 500000000500000000","title":"\u0412\u044b\u0432\u043e\u0434\u044b"},{"location":"lab3/","text":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 Celery \u0438 FastAPI \u00b6 \u041f\u0440\u043e\u0435\u043a\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 Docker Compose: \u0421\u0435\u0440\u0432\u0438\u0441\u044b \u00b6 db \u2013 PostgreSQL \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. redis \u2013 \u0431\u0440\u043e\u043a\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0434\u043b\u044f Celery. parser \u2013 \u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446. hackathon \u2013 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. celery_worker \u2013 \u0432\u043e\u0440\u043a\u0435\u0440 Celery \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447. Celery \u0437\u0430\u0434\u0430\u0447\u0438 \u00b6 1. parse_url_tasks \u00b6 \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043f\u0430\u0440\u0441\u0438\u0442 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 httpx.AsyncClient \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 HTML. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTML \u043d\u0430 \u0441\u0435\u0440\u0432\u0438\u0441 parser \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445. 2. parse_all_urls \u00b6 \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a URL \u0438\u0437 urls . \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 _parse_url \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e URL \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. FastAPI \u0440\u043e\u0443\u0442\u044b \u00b6 POST /parse-url \u00b6 \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440: url \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 Celery parse_url_tasks . \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 task_id . POST /parse-all \u00b6 \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 Celery parse_all_urls . \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 task_id . GET /task-status/{task_id} \u00b6 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u0434\u0430\u0447\u0438 Celery \u043f\u043e task_id . \u0415\u0441\u043b\u0438 \u0433\u043e\u0442\u043e\u0432\u043e \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 status: completed \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0415\u0441\u043b\u0438 \u0435\u0449\u0451 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 status: pending . \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u00b6 \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u0437 asyncio \u0438 httpx . Celery \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Redis \u043a\u0430\u043a \u0431\u0440\u043e\u043a\u0435\u0440 \u0438 backend. \u041f\u0430\u0440\u0441\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u0435, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 API.","title":"lab3"},{"location":"lab3/#celery-fastapi","text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 Docker Compose:","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 Celery \u0438 FastAPI"},{"location":"lab3/#_1","text":"db \u2013 PostgreSQL \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. redis \u2013 \u0431\u0440\u043e\u043a\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0434\u043b\u044f Celery. parser \u2013 \u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446. hackathon \u2013 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. celery_worker \u2013 \u0432\u043e\u0440\u043a\u0435\u0440 Celery \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447.","title":"\u0421\u0435\u0440\u0432\u0438\u0441\u044b"},{"location":"lab3/#celery","text":"","title":"Celery \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"lab3/#1-parse_url_tasks","text":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043f\u0430\u0440\u0441\u0438\u0442 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 httpx.AsyncClient \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 HTML. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTML \u043d\u0430 \u0441\u0435\u0440\u0432\u0438\u0441 parser \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445.","title":"1. parse_url_tasks"},{"location":"lab3/#2-parse_all_urls","text":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a URL \u0438\u0437 urls . \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 _parse_url \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e URL \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.","title":"2. parse_all_urls"},{"location":"lab3/#fastapi","text":"","title":"FastAPI \u0440\u043e\u0443\u0442\u044b"},{"location":"lab3/#post-parse-url","text":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440: url \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 Celery parse_url_tasks . \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 task_id .","title":"POST /parse-url"},{"location":"lab3/#post-parse-all","text":"\u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 Celery parse_all_urls . \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 task_id .","title":"POST /parse-all"},{"location":"lab3/#get-task-statustask_id","text":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u0434\u0430\u0447\u0438 Celery \u043f\u043e task_id . \u0415\u0441\u043b\u0438 \u0433\u043e\u0442\u043e\u0432\u043e \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 status: completed \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0415\u0441\u043b\u0438 \u0435\u0449\u0451 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 status: pending .","title":"GET /task-status/{task_id}"},{"location":"lab3/#_2","text":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u0437 asyncio \u0438 httpx . Celery \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Redis \u043a\u0430\u043a \u0431\u0440\u043e\u043a\u0435\u0440 \u0438 backend. \u041f\u0430\u0440\u0441\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u0435, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 API.","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438"}]}